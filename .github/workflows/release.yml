name: 'Pipeline'

on:
  push:
    branches: [ '**' ]

defaults:
  run:
    shell: bash

jobs:
  build_python:
    runs-on: windows-latest
    name: 'Build'
    outputs:
      version: ${{ steps.step_version.outputs.version }}
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: 'Remove Qml Test Files'
        run: |
          function execute() { echo -e "\033[0;34m$*\033[0m"; "$@"; }
          
          execute find . -type f -name 'tst_*' -delete
      - name: 'Install Python 3.11'
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: 'Install just'
        uses: taiki-e/install-action@just
      - name: 'Download libmpv'
        run: |
          function execute() { echo -e "\033[0;34m$*\033[0m"; "$@"; }

          ARTIFACT="mpv-dev-x86_64-20240211-git-f5c4f0b.7z"
          SHA1="7e9aa859440666696b8cf81cb7c9a0591aa9405b"
          URL="https://sourceforge.net/projects/mpv-player-windows/files/libmpv/$ARTIFACT"

          execute curl -L -O "$URL"
          echo -e "\033[0;34mecho -n $SHA1 $ARTIFACT > $ARTIFACT.sha1\033[0m"
          echo -n "$SHA1 $ARTIFACT" > "$ARTIFACT.sha1"
          execute sha1sum --check "$ARTIFACT.sha1"
          execute 7z x "$ARTIFACT"
      - name: 'Set Build Information'
        id: step_version
        run: |
          function debug() { echo -e "\033[0;35m$*\033[0m"; }
          function execute() { echo -e "\033[0;34m$*\033[0m"; "$@"; }

          PLACEHOLDER_TAG=">>>tag<<<"
          PLACEHOLDER_COMMIT=">>>commit-id<<<"

          CURRENT_TAG="$(git describe --tags --abbrev=0)"
          debug "git tag: $CURRENT_TAG"

          CURRENT_COMMIT="$(git rev-parse HEAD)"
          CURRENT_COMMIT="${CURRENT_COMMIT:0:8}"
          debug "git commit: $CURRENT_COMMIT"

          ARTIFACT_NAME="mpvQC-$CURRENT_TAG-$CURRENT_COMMIT"
          debug "artifact name: $ARTIFACT_NAME"
          echo "version=$ARTIFACT_NAME" >> $GITHUB_OUTPUT

          execute sed -i "s/$PLACEHOLDER_TAG/$CURRENT_TAG/g" "mpvqc/startup.py"
          execute sed -i "s/$PLACEHOLDER_COMMIT/$CURRENT_COMMIT/g" "mpvqc/startup.py"
          execute cat "mpvqc/startup.py"

          execute sed -i "s/$PLACEHOLDER_TAG/$CURRENT_TAG/g" "qml/dialogs/about/MpvqcAboutView.qml"
          execute sed -i "s/$PLACEHOLDER_COMMIT/$CURRENT_COMMIT/g" "qml/dialogs/about/MpvqcAboutView.qml"
          execute cat "qml/dialogs/about/MpvqcAboutView.qml"
      - name: 'Set Dependency Versions'
        run: |
          function execute() { echo -e "\033[0;34m$*\033[0m"; "$@"; }
          function error() { echo -e "\033[0;31m$*\033[0m"; }
          
          DEPENDENCY_MODEL_FILE='MpvqcLibraryModel.qml'
          DEPENDENCY_MODEL_PATH=$(find qml -type f -name "$DEPENDENCY_MODEL_FILE")
          
          if [ -z "$DEPENDENCY_MODEL_PATH" ]; then
            error "Could not find dependency model $DEPENDENCY_MODEL_FILE"
            exit 1
          fi
          
          DEPENDENCIES=("inject" "Jinja2" "mpv" "PySide6" "pywin32" "parameterized")  # List ALL dependencies for ALL os manually :|
          
          for (( i=0; i<${#DEPENDENCIES[@]}; i++ )) do
            DEPENDENCY="${DEPENDENCIES[$i]}"
            VERSION=$(curl -s "https://pypi.org/pypi/$DEPENDENCY/json" | jq -r .info.version)
          
            if [ -z "$VERSION" ]; then
              error "Could not fetch version for dependency: $DEPENDENCY"
              exit 1
            fi
          
            execute sed -i "s/@@pypi-$DEPENDENCY@@/$VERSION/g" "$DEPENDENCY_MODEL_PATH"
          done
          
          if grep '@@' "$DEPENDENCY_MODEL_PATH"; then
            error 'Could not find all dependency versions'
            exit 1
          else
            execute cat "$DEPENDENCY_MODEL_PATH"
          fi
      - name: 'Setup Virtual Environment'
        run: |
          function execute() { echo -e "\033[0;34m$*\033[0m"; "$@"; }

          execute python -m venv venv
          execute source venv/Scripts/activate
          execute python -m pip install --upgrade pip
          execute python -m pip install wheel
          execute python -m pip install -r requirements.txt
      - name: 'Run Python Build'
        run: |
          function execute() { echo -e "\033[0;34m$*\033[0m"; "$@"; }

          execute source venv/Scripts/activate
          execute just test-python
          execute just clean
          execute just build
      - name: 'Upload Build Artifact'
        uses: actions/upload-artifact@v4
        with:
          path: build/release
          name: release-build-artifact

  test_qml:
    runs-on: ubuntu-latest
    name: 'Test Qml'
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4
      - name: 'Install Qt 6.6.2'
        uses: jurplel/install-qt-action@v3
        with:
          version: '6.6.2'
      - name: 'Install just'
        uses: taiki-e/install-action@just
#      - name: 'Lint Qml Files'
#        run: |
#          function execute() { echo -e "\033[0;34m$*\033[0m"; "$@"; }
#
#          execute just lint-qml
#        continue-on-error: true
      - name: 'Execute Qml Tests'
        run: |
          function execute() { echo -e "\033[0;34m$*\033[0m"; "$@"; }

          execute export QT_QPA_PLATFORM=offscreen
          execute just test-qml

  build_windows:
    runs-on: windows-latest
    name: 'Build Windows'
    needs:
      - build_python
      - test_qml
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4
      - name: 'Install Python 3.11'
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: 'Remove Python sources'
        run: |
          function execute() { echo -e "\033[0;34m$*\033[0m"; "$@"; }
          
          execute rm -rf mpvqc main.py
      - name: 'Download Build Artifact'
        uses: actions/download-artifact@v4
        with:
          name: release-build-artifact
          path: .
      - name: 'Setup Build Environment'
        run: |
          function execute() { echo -e "\033[0;34m$*\033[0m"; "$@"; }

          execute python -m venv venv
          execute source venv/Scripts/activate
          execute python -m pip install --upgrade pip
          execute python -m pip install wheel
          execute python -m pip install -r requirements.txt
          execute python -m pip install nuitka
      - name: 'Build Bundle'
        run: |
          function execute() { echo -e "\033[0;34m$*\033[0m"; "$@"; }

          execute source venv/Scripts/activate
          
          execute python.exe -m nuitka main.py \
            --follow-imports \
            --assume-yes-for-downloads \
            --standalone \
            --deployment \
            --enable-plugin=pyside6 \
            --output-dir=deployment \
            --include-data-files=LICENSE=LICENSE \
            --include-data-files=venv/Lib/site-packages/PySide6/translations/qtbase*.qm=PySide6/translations/ \
            --windows-disable-console \
            --windows-icon-from-ico=build-aux/windows/icon.ico \
            --include-qt-plugins=all \
            --include-qt-plugins=qml \
            --noinclude-qt-plugins=designer \
            --noinclude-qt-plugins=multimedia \
            --noinclude-qt-plugins=sqldrivers \
            --noinclude-qt-translations \
            --noinclude-dlls=opengl32sw.dll \
            --noinclude-dlls=qt6designer.dll \
            --noinclude-dlls=qt6pdf.dll \
            --noinclude-dlls=qt6widgets.dll \
            --noinclude-dlls=Qt6Charts* \
            --noinclude-dlls=Qt6Quick3D* \
            --noinclude-dlls=Qt6Sensors* \
            --noinclude-dlls=Qt6Test* \
            --noinclude-dlls=Qt6WebEngine* \
            --noinclude-data-files=PySide6/QtWidgets.pyd \
            --output-filename=mpvQC.exe
      - name: 'Remove Redundant Binaries'
        run: |
          function execute() { echo -e "\033[0;34m$*\033[0m"; "$@"; }

          execute find deployment/main.dist -type f -name 'QtWidgets.pyd' -delete
      - name: 'Package libmpv'
        run: |
          function execute() { echo -e "\033[0;34m$*\033[0m"; "$@"; }

          ARTIFACT="mpv-dev-x86_64-20240211-git-f5c4f0b.7z"
          SHA1="7e9aa859440666696b8cf81cb7c9a0591aa9405b"
          URL="https://sourceforge.net/projects/mpv-player-windows/files/libmpv/$ARTIFACT"

          execute curl -L -O "$URL"
          echo -e "\033[0;34mecho -n $SHA1 $ARTIFACT > $ARTIFACT.sha1\033[0m"
          echo -n "$SHA1 $ARTIFACT" > "$ARTIFACT.sha1"
          execute sha1sum --check "$ARTIFACT.sha1"
          execute 7z x "$ARTIFACT"
          execute mv libmpv-2.dll deployment/main.dist
      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: "${{ needs.build_python.outputs.version }}-win-x86_64"
          path: "deployment/main.dist"

  build_linux:
    runs-on: ubuntu-latest
    container:
      image: bilelmoussaoui/flatpak-github-actions:freedesktop-23.08
      options: --privileged
    name: 'Build Linux'
    if: github.ref_name == 'skip until we seriously want to build a release'
    needs:
      - build_python
      - test_qml
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4
      - name: 'Download Build Artifact'
        uses: actions/download-artifact@v4
        with:
          path: build/release
          name: release-build-artifact
      - name: 'Prepare Flatpak Build'
        run: |
          function execute() { echo -e "\033[0;34m$*\033[0m"; "$@"; }

          execute mv build-aux/linux/com.github.mpvqc.mpvQC.yml com.github.mpvqc.mpvQC.yml
      - name: 'Build Flatpak'
        uses: bilelmoussaoui/flatpak-github-actions/flatpak-builder@v6
        with:
          manifest-path: com.github.mpvqc.mpvQC.yml
          bundle: ${{ needs.build_python.outputs.version }}-linux.flatpak
          branch: main
          cache-key: flatpak-builder-${{ github.sha }}
