# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Build

on:
  push:
    branches: [ '**' ]

defaults:
  run:
    shell: bash

jobs:
  build_python:
    runs-on: ubuntu-latest
    name: 'Build mpvQC'
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4
      - name: 'Install Python 3.12'
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: 'Install just'
        uses: taiki-e/install-action@just
      - name: 'Update Packages And Dependencies'
        run: |
          function execute() { echo -e "\033[0;34m$*\033[0m"; "$@"; }

          execute sudo apt update -y 
          execute sudo apt upgrade -y
          execute sudo apt install -y libmpv1 qttools5-dev-tools
      - name: 'Setup Virtual Environment'
        run: |
          function execute() { echo -e "\033[0;34m$*\033[0m"; "$@"; }

          execute python -m venv venv
          execute source venv/bin/activate
          execute python -m pip install --upgrade pip
          execute python -m pip install wheel
          execute python -m pip install -r requirements.txt
      - name: 'Run Python Build'
        run: |
          function execute() { echo -e "\033[0;34m$*\033[0m"; "$@"; }

          execute source venv/bin/activate
          execute just build
      - name: 'Upload Build Artifact'
        uses: actions/upload-artifact@v4
        with:
          path: build/release
          name: release-build-artifact

  build_windows:
    runs-on: windows-latest
    name: 'Build Windows'
    needs:
      - build_python
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4
      - name: 'Download Build Artifact'
        uses: actions/download-artifact@v4
        with:
          path: build/release
          name: release-build-artifact
      - name: 'Install Python 3.12'
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: 'Setup Build Environment'
        run: |
          function execute() { echo -e "\033[0;34m$*\033[0m"; "$@"; }

          execute python -m venv venv
          execute source venv/Scripts/activate
          execute python -m pip install --upgrade pip
          execute python -m pip install wheel
          execute python -m pip install -r requirements.txt
          execute python -m pip install pyinstaller
      - name: 'Build Bundle'
        run: |
          function execute() { echo -e "\033[0;34m$*\033[0m"; "$@"; }

          execute source venv/Scripts/activate
          execute pyinstaller \
            --name mpvQC \
            --workpath build-windows \
            --icon=data/icon.ico \
            --collect-binaries PyQt5 \
            --add-data "LICENSE;." \
            --noconsole \
            build/release/main.py
      - name: 'Remove Redundant Files'
        run: |
          function execute() { echo -e "\033[0;34m$*\033[0m"; "$@"; }

          execute rm -rf dist/mpvQC/_internal/PyQt5/Qt5/qml

          execute find dist/mpvQC -type f -name 'opengl32sw.dll' -delete
          execute find dist/mpvQC -type f -name 'd3dcompiler*.dll' -delete
          execute find dist/mpvQC -type f -name 'Qt5Designer.dll' -delete
          execute find dist/mpvQC -type f -name 'Qt5Quick.dll' -delete
          execute find dist/mpvQC -type f -name 'Qt5Qml.dll' -delete
          execute find dist/mpvQC -type f -name 'libGLES*.dll' -delete
          execute find dist/mpvQC -type f -name 'Qt5XmlPatterns.dll' -delete
          execute find dist/mpvQC -type f -name 'Qt5Network.dll' -delete
          execute find dist/mpvQC -type f -name 'Qt5Quick3DRuntimeRender.dll' -delete
          execute find dist/mpvQC -type f -name 'Qt5QuickTemplates*.dll' -delete
          execute find dist/mpvQC -type f -name 'Qt5Multimedia.dll' -delete
          execute find dist/mpvQC -type f -name 'Qt5Location.dll' -delete
          execute find dist/mpvQC -type f -name 'libeay*.dll' -delete
      - name: 'Make Archive Portable'
        run: |
          function execute() { echo -e "\033[0;34m$*\033[0m"; "$@"; }

          execute touch dist/mpvQC/_internal/portable
      - name: 'Package libmpv'
        run: |
          function execute() { echo -e "\033[0;34m$*\033[0m"; "$@"; }
          
          ARTIFACT="mpv-dev-x86_64-v3-20240121-git-a39f9b6.7z"
          SHA1="0764a4b899a7ebb1476e5b491897c5e2eed8a07f"
          URL="https://sourceforge.net/projects/mpv-player-windows/files/libmpv/$ARTIFACT"
          
          execute curl -L -O "$URL"
          echo -e "\033[0;34mecho -n $SHA1 $ARTIFACT > $ARTIFACT.sha1\033[0m"
          echo -n "$SHA1 $ARTIFACT" > "$ARTIFACT.sha1"
          execute sha1sum --check "$ARTIFACT.sha1"
          execute 7z x "$ARTIFACT"
          execute mv libmpv-2.dll dist/mpvQC
      - name: 'Compress Artifact'
        shell: pwsh
        run: Compress-Archive -Path "dist\mpvQC\*" -DestinationPath "mpvQC-build-win.zip"
      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v3
        with:
          name: "mpvQC-build-win-x86_64"
          path: "mpvQC-build-win.zip"
