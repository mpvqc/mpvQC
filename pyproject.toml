[project]
name = "mpvQC"
version = "0.9.0-beta"
description = "libmpv based application for quality control of videos"
requires-python = ">=3.13"
readme = "README.MD"
dependencies = [
    "inject>=5.2.1",
    "Jinja2>=3.1.6",
    "mpv>=1.0.7",
    "PySide6-Essentials==6.9.0",
    "pywin32>=310; sys_platform == 'win32'",
]
classifiers = [
    "Development Status :: 4 - Beta",                           # 4 - Beta, 5 - Production/Stable
    "License :: OSI Approved :: GNU General Public License v3",
    "Programming Language :: Python :: 3.13",
    "Private :: Do Not Upload",
]

[dependency-groups]
dev = [
    "pytest>=8.3.5",
    "pre-commit>=4.2.0",
    "materialyoucolor>=2.0.10",
]

[project.urls]
Homepage = "https://mpvqc.github.io"
Repository = "https://github.com/mpvqc/mpvQC"
Issues = "https://github.com/mpvqc/mpvQC/issues"

[tool.ruff]
line-length = 120
target-version = "py313"

[tool.ruff.lint]
preview = true
extend-select = [
    "C",    # flake8-comprehensions
    "CPY",  # flake8-copyright
    "DTZ",  # flake8-datetimez
    "EXE",  # flake8-executable
    "FA",   # flake8-future-annotations
    "FIX",  # flake8-fixme
    "G",    # flake8-logging-format
    "ICN",  # flake8-import-conventions
    "ISC",  # flake8-implicit-str-concat
    "LOG",  # flake8-logging
    "PIE",  # flake8-pie
    "PYI",  # flake8-pyi
    "PT",   # flake8-pytest-style
    "Q",    # flake8-quotes
    "RSE",  # flake8-raise
    "RET",  # flake8-return
    "SLF",  # flake8-self
    "SIM",  # flake8-simplify
    "SLOT", # flake8-slots
    "TID",  # flake8-tidy-imports
    "TD",   # flake8-todos
    "TC",   # flake8-type-checking
    "ARG",  # flake8-unused-arguments
    "PTH",  # flake8-use-pathlib

    "I",    # Sort imports
    "S",    # Bandit security checks
    "UP",   # Upgrade hints based on new language features
]

[tool.ruff.lint.extend-per-file-ignores]
"test/**/*.py" = [ # https://github.com/astral-sh/ruff/issues/4368
    "S101", # asserts allowed in tests...
    "ARG",  # Unused function args -> fixtures nevertheless are functionally relevant...
    "FBT",  # Don't care about booleans as positional arguments in tests, e.g. via @pytest.mark.parametrize()
    "SLF",  # flake8-self
]
